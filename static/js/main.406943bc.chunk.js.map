{"version":3,"sources":["components/Dashboard/SearchBox/index.js","components/Dashboard/GameCard/index.js","components/Dashboard/index.js","components/Dashboard/use-debounce.js","components/App/index.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","padding","display","alignItems","borderRadius","input","marginLeft","spacing","flex","iconButton","divider","height","margin","CustomizedInputBase","value","onChange","classes","Paper","className","IconButton","aria-label","InputBase","placeholder","target","paddingLeft","details","flexDirection","content","cover","width","alignSelf","paddingTop","chips","chip","marginRight","GameCard","title","imgUrl","users","Card","src","alt","CardContent","Typography","component","variant","length","map","user","id","avatar","realname","personaname","Chip","key","label","Avatar","userChip","HOST","Dashboard","useState","searchTerm","setSearchTerm","searchResult","setSearchResult","selectedGame","setSelectedGame","setUsers","debouncedSearchTerm","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","name","axios","post","then","data","selectGame","game","appId","get","term","img_logo_url","style","cursor","onClick","App","Boolean","window","location","hostname","match","createMuiTheme","palette","type","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.406943bc.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    borderRadius: 0,\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n  },\n  iconButton: {\n    padding: 10,\n  },\n  divider: {\n    height: 28,\n    margin: 4,\n  },\n}));\n\nexport default function CustomizedInputBase({ value, onChange }) {\n  const classes = useStyles();\n\n  return (\n    <Paper className={classes.root}>\n      <IconButton className={classes.iconButton} aria-label=\"menu\">\n        <MenuIcon />\n      </IconButton>\n      <InputBase\n        className={classes.input}\n        placeholder=\"Search Game\"\n        value={value}\n        onChange={({ target }) => onChange(target.value)}\n      />\n      <IconButton className={classes.iconButton} aria-label=\"search\">\n        <SearchIcon />\n      </IconButton>\n    </Paper>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    margin: '10px 40px',\n    paddingLeft: 20,\n    borderRadius: 0,\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    flex: '1 0 auto',\n    padding: '10px 16px',\n  },\n  cover: {\n    width: 92,\n    alignSelf: 'start',\n    paddingTop: 20,\n  },\n  chips: {\n    display: 'flex',\n    paddingTop: 10,\n  },\n  chip: {\n    marginRight: 15,\n  },\n}));\n\nconst userChip = ({ id, avatar, realname, personaname }, className) => (\n  <Chip\n    key={id}\n    className={className}\n    label={`${personaname} (${realname})`}\n    avatar={<Avatar src={avatar}>{realname[0]}</Avatar>}\n  />\n);\n\nexport default function GameCard({ title, imgUrl, users = [] }) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      {imgUrl && <img className={classes.cover} src={imgUrl} alt={title} />}\n      <div className={classes.details}>\n        <CardContent className={classes.content}>\n          <Typography component=\"h6\" variant=\"h6\">\n            {title}\n          </Typography>\n          {users.length ? (\n            <div className={classes.chips}>\n              {users.map((user) => userChip(user, classes.chip))}\n            </div>\n          ) : null}\n        </CardContent>\n      </div>\n    </Card>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport SearchBox from './SearchBox';\nimport GameCard from './GameCard';\nimport useDebounce from './use-debounce';\n\nconst HOST = 'http://myrik.xyz:5000';\n\nconst findGameUsers = (appId) =>\n  axios.get(`${HOST}/game/${appId}/users`).then(({ data }) => data);\n\nconst searchGame = (name) => {\n  return axios.post(`${HOST}/game`, { name }).then(({ data }) => data);\n};\n\nfunction Dashboard() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResult, setSearchResult] = useState([]);\n  const [selectedGame, setSelectedGame] = useState(null);\n  const [users, setUsers] = useState([]);\n\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n  useEffect(() => {\n    if (debouncedSearchTerm) {\n      searchGame(debouncedSearchTerm).then(setSearchResult);\n    } else {\n      setSearchResult([]);\n    }\n  }, [debouncedSearchTerm]);\n\n  const changeTerm = (term) => {\n    setSearchTerm(term);\n    setSelectedGame(null);\n  };\n\n  const selectGame = (game) => {\n    setSearchResult([]);\n    setSelectedGame(game);\n    findGameUsers(game.id).then(setUsers);\n  };\n\n  const searchCard = (game) => {\n    const { name, img_logo_url, id } = game;\n\n    return (\n      <div\n        key={id}\n        style={{ cursor: 'pointer' }}\n        onClick={() => selectGame(game)}\n      >\n        <GameCard title={name} imgUrl={img_logo_url} />\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <SearchBox value={searchTerm} onChange={changeTerm} />\n      {selectedGame ? (\n        <GameCard\n          title={selectedGame.name}\n          imgUrl={selectedGame.img_logo_url}\n          users={users}\n        />\n      ) : (\n        searchResult.map(searchCard)\n      )}\n    </div>\n  );\n}\n\nexport default Dashboard;\n","import { useState, useEffect } from 'react';\n\nexport default function useDebounce(value, delay) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [delay, value]);\n\n  return debouncedValue;\n}\n","import React from 'react';\nimport './styles.css';\nimport Dashboard from '../Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Dashboard />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}